{"version":3,"sources":["components/Cell.module.css","components/ControlPanel.module.css","field.ts","store.ts","components/Cell.tsx","components/Field.tsx","components/ControlPanel.tsx","components/Rules.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Field.module.css"],"names":["module","exports","NEIGHBORING_CELLS","getEmptyField","field","i","j","getNextField","rules","result","count","reduce","sum","diff","x","y","HEIGHT","WIDTH","dead","live","changeCell","row","column","newCell","getRandomField","Math","random","ACTION_TYPES","initialState","isRunning","store","createStore","state","action","type","GET_NEXT","CHANGE_CELL","payload","RESET","SET_RANDOM","CHANGE_RULES","START_STOP","Cell","status","dispatch","useDispatch","className","styles","cell","getClassName","onClick","Field","useSelector","wrapper","map","rowIndex","ControlPanel","disabled","Rules","clickHandler","deadOrAlive","index","rule","ruleIndex","onChange","checked","App","useEffect","intervalId","setInterval","clearInterval","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1c142f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2qGwA\",\"live\":\"Cell_live__Zur0O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ControlPanel_wrapper__37OKP\"};","export const WIDTH = 19;\nexport const HEIGHT = 19;\nexport const LIVE = 1;\nexport const DEAD = 0;\n\nexport type Status = typeof DEAD | typeof LIVE;\n\nexport type Field = Status[][];\n\nexport type Rules = {\n  live: Status[];\n  dead: Status[];\n};\n\nexport const DEFAULT_RULES = {\n  live: [0, 0, 1, 1, 0, 0, 0, 0, 0] as Status[],\n  dead: [0, 0, 0, 1, 0, 0, 0, 0, 0] as Status[]\n};\n\nconst NEIGHBORING_CELLS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, -1]\n];\n\nexport function getEmptyField(): Field {\n  const field: Field = [];\n  for (let i = 0; i < HEIGHT; i++) {\n    field[i] = [];\n    for (let j = 0; j < WIDTH; j++) {\n      field[i][j] = DEAD;\n    }\n  }\n  return field;\n}\n\nexport function getNextField(field: Field, rules: Rules) {\n  const result: Field = [];\n  for (let i = 0; i < HEIGHT; i++) {\n    result[i] = [];\n    for (let j = 0; j < WIDTH; j++) {\n      const count = NEIGHBORING_CELLS.reduce((sum, diff) => {\n        let x = i - diff[0];\n        let y = j - diff[1];\n\n        if (x < 0) x = HEIGHT - 1;\n        if (y < 0) y = WIDTH - 1;\n        if (x >= HEIGHT) x = 0;\n        if (y >= WIDTH) y = 0;\n\n        return sum + field[x][y];\n      }, 0);\n\n      if (field[i][j] === DEAD) {\n        result[i][j] = rules.dead[count];\n      } else {\n        result[i][j] = rules.live[count];\n      }\n    }\n  }\n  return result;\n}\n\nexport function changeCell(field: Field, row: number, column: number): Field {\n  const newCell = field[row][column] === DEAD ? LIVE : DEAD;\n  field[row] = [...field[row]];\n  field[row][column] = newCell;\n  return [...field];\n}\n\nexport function getRandomField(): Field {\n  const field: Field = [];\n  for (let i = 0; i < HEIGHT; i++) {\n    field[i] = [];\n    for (let j = 0; j < WIDTH; j++) {\n      field[i][j] = Math.random() > 0.5 ? LIVE : DEAD;\n    }\n  }\n  return field;\n}\n","import {\n  changeCell,\n  DEFAULT_RULES,\n  Field,\n  getEmptyField,\n  getNextField,\n  getRandomField,\n  Rules\n} from './field';\nimport { createStore } from 'redux';\n\nexport enum ACTION_TYPES {\n  GET_NEXT,\n  RESET,\n  SET_RANDOM,\n  CHANGE_CELL,\n  CHANGE_RULES,\n  START_STOP\n}\n\ntype ActionGetNext = {\n  type: ACTION_TYPES.GET_NEXT;\n};\n\ntype ActionReset = {\n  type: ACTION_TYPES.RESET;\n};\n\ntype ActionSetRandom = {\n  type: ACTION_TYPES.SET_RANDOM;\n};\n\ntype ActionChangeCell = {\n  type: ACTION_TYPES.CHANGE_CELL;\n  payload: {\n    row: number;\n    column: number;\n  };\n};\n\ntype ActionChangeRules = {\n  type: ACTION_TYPES.CHANGE_RULES;\n  payload: Rules;\n};\n\ntype ActionStartStop = {\n  type: ACTION_TYPES.START_STOP;\n};\n\ntype Action =\n  | ActionChangeCell\n  | ActionGetNext\n  | ActionSetRandom\n  | ActionReset\n  | ActionChangeRules\n  | ActionStartStop;\n\nexport type Store = {\n  isRunning: boolean;\n  rules: Rules;\n  field: Field;\n};\n\nexport const initialState: Store = {\n  isRunning: false,\n  rules: DEFAULT_RULES,\n  field: getEmptyField()\n};\n\nexport function reducer(state = initialState, action: Action): Store {\n  switch (action.type) {\n    case ACTION_TYPES.GET_NEXT:\n      return {\n        ...state,\n        field: getNextField(state.field, state.rules)\n      };\n    case ACTION_TYPES.CHANGE_CELL:\n      return {\n        ...state,\n        field: changeCell(state.field, action.payload.row, action.payload.column)\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...state,\n        field: getEmptyField()\n      };\n    case ACTION_TYPES.SET_RANDOM:\n      return {\n        ...state,\n        field: getRandomField()\n      };\n    case ACTION_TYPES.CHANGE_RULES:\n      return {\n        ...state,\n        rules: action.payload\n      };\n    case ACTION_TYPES.START_STOP:\n      return {\n        ...state,\n        isRunning: !state.isRunning\n      };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);\nexport default store;\n","import { LIVE, DEAD } from '../field';\nimport styles from './Cell.module.css';\nimport { useDispatch } from 'react-redux';\nimport { ACTION_TYPES } from '../store';\n\ntype CellProps = {\n  status: typeof DEAD | typeof LIVE;\n  row: number;\n  column: number;\n};\n\nexport default function Cell({ status, row, column }: CellProps) {\n  const dispatch = useDispatch();\n  function getClassName() {\n    let result = styles.cell;\n    if (status === LIVE) {\n      result += ' ' + styles.live;\n    }\n    return result;\n  }\n\n  function handleClick() {\n    dispatch({\n      type: ACTION_TYPES.CHANGE_CELL,\n      payload: {\n        row,\n        column\n      }\n    });\n  }\n\n  return <div className={getClassName()} onClick={handleClick} />;\n}\n","import { useSelector } from 'react-redux';\nimport { Store } from '../store';\nimport styles from './Field.module.css';\nimport Cell from './Cell';\n\nexport default function Field() {\n  const field = useSelector((state: Store) => state.field);\n  return (\n    <div className={styles.wrapper}>\n      {field.map((row, rowIndex) => (\n        <div className={styles.row} key={rowIndex}>\n          {row.map((status, column) => (\n            <Cell status={status} row={rowIndex} column={column} key={column} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ACTION_TYPES, Store } from '../store';\nimport styles from './ControlPanel.module.css';\n\nexport default function ControlPanel() {\n  const dispatch = useDispatch();\n  const isRunning = useSelector((state: Store) => state.isRunning);\n\n  return (\n    <div className={styles.wrapper}>\n      <button onClick={() => dispatch({ type: ACTION_TYPES.START_STOP })}>\n        {isRunning ? 'Стоп' : 'Старт'}\n      </button>\n      <button disabled={isRunning} onClick={() => dispatch({ type: ACTION_TYPES.RESET })}>\n        Сброс\n      </button>\n      <button disabled={isRunning} onClick={() => dispatch({ type: ACTION_TYPES.SET_RANDOM })}>\n        Random\n      </button>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ACTION_TYPES, Store } from '../store';\nimport { DEAD, LIVE, Status } from '../field';\n\nexport default function Rules() {\n  const rules = useSelector((state: Store) => state.rules);\n  const dispatch = useDispatch();\n  const isRunning = useSelector((state: Store) => state.isRunning);\n\n  function clickHandler(deadOrAlive: Status, index: number) {\n    if (deadOrAlive === DEAD) {\n      rules.dead[index] = rules.dead[index] === DEAD ? LIVE : DEAD;\n    } else {\n      rules.live[index] = rules.live[index] === DEAD ? LIVE : DEAD;\n    }\n    dispatch({\n      type: ACTION_TYPES.CHANGE_RULES,\n      payload: { ...rules }\n    });\n  }\n\n  return (\n    <>\n      <div>\n        Dead:\n        {rules.dead.map((rule, ruleIndex) => (\n          <input\n            key={ruleIndex}\n            type=\"checkbox\"\n            disabled={isRunning}\n            onChange={() => clickHandler(DEAD, ruleIndex)}\n            checked={rule === LIVE}\n          />\n        ))}\n      </div>\n      <div>\n        Live:\n        {rules.live.map((rule, ruleIndex) => (\n          <input\n            key={ruleIndex}\n            type=\"checkbox\"\n            disabled={isRunning}\n            onChange={() => clickHandler(LIVE, ruleIndex)}\n            checked={rule === LIVE}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Field from './components/Field';\nimport ControlPanel from './components/ControlPanel';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ACTION_TYPES, Store } from './store';\nimport Rules from './components/Rules';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isRunning = useSelector((state: Store) => state.isRunning);\n\n  useEffect(() => {\n    let intervalId: ReturnType<typeof setTimeout>;\n    if (isRunning) {\n      intervalId = setInterval(() => {\n        dispatch({ type: ACTION_TYPES.GET_NEXT });\n      }, 500);\n    }\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [isRunning, dispatch]);\n\n  return (\n    <div className=\"App\">\n      <h1>Игра \"Жизнь\"</h1>\n      <p>\n        Сделана по{' '}\n        <a href=\"https://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%C2%AB%D0%96%D0%B8%D0%B7%D0%BD%D1%8C%C2%BB\">\n          этой инструкции\n        </a>{' '}\n        c применением библиотеки <a href=\"https://redux.js.org/\">Redux</a>.\n      </p>\n      <Rules />\n      <ControlPanel />\n      <Field />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Field_wrapper__3DN9N\",\"row\":\"Field_row__2Jy1k\"};"],"sourceRoot":""}